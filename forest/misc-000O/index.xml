<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/forest/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/forest/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2025</fr:year>
      <fr:month>2</fr:month>
      <fr:day>22</fr:day>
    </fr:date>
    <fr:uri>https://trebor-huang.github.io/forest/misc-000O/</fr:uri>
    <fr:display-uri>misc-000O</fr:display-uri>
    <fr:route>/forest/misc-000O/</fr:route>
    <fr:title text="induction of reversible languages">induction of reversible languages</fr:title>
    <fr:taxon>Algorithm</fr:taxon>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>
  This algorithm is described in <fr:link href="/forest/inference-of-reversible-languages/" title="Inference of Reversible Languages" uri="https://trebor-huang.github.io/forest/inference-of-reversible-languages/" display-uri="inference-of-reversible-languages" type="local">Inference of Reversible Languages</fr:link>. It inputs a set of example strings in a <fr:link href="/forest/misc-000M/" title="reversible regular language" uri="https://trebor-huang.github.io/forest/misc-000M/" display-uri="misc-000M" type="local">reversible regular language</fr:link>, and outputs a finite <fr:link href="/forest/misc-000L/" title="bideterministic automaton" uri="https://trebor-huang.github.io/forest/misc-000L/" display-uri="misc-000L" type="local">bideterministic automaton</fr:link>. The soundness proof is given as Theorem 26, and if the input enumerates all the strings in the language, then the output is guaranteed to converge to the correct minimal DFA at a finite stage by Theorem 27. Note that obviously we cannot algorithmically determine whether it has converged or not, without further information.
</html:p>
    <html:p>
  The algorithm proceeds as follows. Start with a trivial automata with a start and accept state, but no transitions. When we read a new example string, add a new chain of states and transitions from the start to the accept state, solely accepting this new string. Then we perform a merging process. Whenever a state has two transitions on the same letter, we merge the destination states, and vice versa for transitions to that state. This process obviously terminates and produces a bideterministic automata. And we can read the next example string.
</html:p>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>Dana Angluin</fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>1982</fr:year>
              <fr:month>7</fr:month>
            </fr:date>
            <fr:uri>https://trebor-huang.github.io/forest/inference-of-reversible-languages/</fr:uri>
            <fr:display-uri>inference-of-reversible-languages</fr:display-uri>
            <fr:route>/forest/inference-of-reversible-languages/</fr:route>
            <fr:title text="Inference of Reversible Languages">Inference of Reversible Languages</fr:title>
            <fr:taxon>Reference</fr:taxon>
            <fr:meta name="doi">10.1145/322326.322334</fr:meta>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>
  We consider inductive inference of certain classes of languages, namely the <fr:tex display="inline"><![CDATA[k]]></fr:tex>-reversible languages for some fixed <fr:tex display="inline"><![CDATA[k \ge  0]]></fr:tex>, from positive, possibly infinite samples. More precisely, given any rational language <fr:tex display="inline"><![CDATA[S]]></fr:tex>, the sample, we prove that there exists a smallest, with respect to inclusion, <fr:tex display="inline"><![CDATA[k]]></fr:tex>-reversible language containing it, which is then also rational. After an algebraic proof, we describe a polynomial algorithm performing the inference.
</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>2</fr:month>
              <fr:day>22</fr:day>
            </fr:date>
            <fr:uri>https://trebor-huang.github.io/forest/tile-000H/</fr:uri>
            <fr:display-uri>tile-000H</fr:display-uri>
            <fr:route>/forest/tile-000H/</fr:route>
            <fr:title text="The transductive algorithm">The transductive algorithm</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>
  The discussion in <fr:link href="/forest/tile-000C/" title="The structure of neighbor Conway signatures" uri="https://trebor-huang.github.io/forest/tile-000C/" display-uri="tile-000C" type="local">ยง <fr:contextual-number uri="https://trebor-huang.github.io/forest/tile-000C/" display-uri="tile-000C" /></fr:link> suggests that we can take the following approach to generate neighbor Conway signatures:
</html:p>
            <html:ul><html:li>Construct a finite automaton that recognizes <fr:tex display="inline"><![CDATA[\mathcal {L}]]></fr:tex>, the <fr:link href="/forest/tile-000E/" title="language of neighborhood relation" uri="https://trebor-huang.github.io/forest/tile-000E/" display-uri="tile-000E" type="local">language of neighborhood relation</fr:link>.</html:li>
  <html:li>Convert a recognizer for the binary relation into a <html:em>transducer</html:em>, i.e. a finite state machine with input and output.</html:li>
  <html:li>Simulate the transducer efficiently.</html:li></html:ul>
            <html:p>
  The second step is very easy. Suppose we are working over the alphabet <fr:tex display="inline"><![CDATA[\Delta ]]></fr:tex>, and we have a finite state automata where the transition edges are labelled with pairs <fr:tex display="inline"><![CDATA[(x, y) \in  \Delta  \times  \Delta ]]></fr:tex>. So we can just relabel it by <fr:tex display="inline"><![CDATA[x/y]]></fr:tex>, i.e. a transition that consumes the symbol <fr:tex display="inline"><![CDATA[x]]></fr:tex> and outputs the symbol <fr:tex display="inline"><![CDATA[y]]></fr:tex>. Of course, this results in a non-deterministic transducer. But there is a lot of previous work on executing non-deterministic transducers, which we can use verbatim.
</html:p>
            <html:p>
  So, we have reduced our problem to the first step. But unless we can resolve <fr:link href="/forest/tile-000F/" title="regularity of the neighborhood relation" uri="https://trebor-huang.github.io/forest/tile-000F/" display-uri="tile-000F" type="local">Conjecture <fr:contextual-number uri="https://trebor-huang.github.io/forest/tile-000F/" display-uri="tile-000F" /></fr:link> constructively, how are we going to produce such an automaton? This is due to a special property that <fr:tex display="inline"><![CDATA[\mathcal {L}^+]]></fr:tex> enjoys, as promised.
</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>22</fr:day>
                </fr:date>
                <fr:uri>https://trebor-huang.github.io/forest/misc-000L/</fr:uri>
                <fr:display-uri>misc-000L</fr:display-uri>
                <fr:route>/forest/misc-000L/</fr:route>
                <fr:title text="bideterministic automaton">bideterministic automaton</fr:title>
                <fr:taxon>Definition</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>
  A deterministic automaton is <html:strong>bideterministic</html:strong> if it has only one accepting state, and if reversing all transitions and swapping the starting and accepting state produces another deterministic automaton.
</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>22</fr:day>
                </fr:date>
                <fr:uri>https://trebor-huang.github.io/forest/misc-000M/</fr:uri>
                <fr:display-uri>misc-000M</fr:display-uri>
                <fr:route>/forest/misc-000M/</fr:route>
                <fr:title text="reversible regular language">reversible regular language</fr:title>
                <fr:taxon>Definition</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>
  A regular language is <html:strong>reversible</html:strong> if it can be recognized by a <fr:link href="/forest/misc-000L/" title="bideterministic automaton" uri="https://trebor-huang.github.io/forest/misc-000L/" display-uri="misc-000L" type="local">bideterministic</fr:link> DFA, which is equivalent to requiring the <fr:link href="/forest/misc-000K/" title="MyhillโNerode automaton" uri="https://trebor-huang.github.io/forest/misc-000K/" display-uri="misc-000K" type="local">MyhillโNerode automaton</fr:link> to be bideterministic.
</html:p>
                <html:p>
  Note that there are stronger and weaker notions of reversible regular languages in the literature, with inconsistent names.
</html:p>
              </fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>22</fr:day>
                </fr:date>
                <fr:uri>https://trebor-huang.github.io/forest/misc-000N/</fr:uri>
                <fr:display-uri>misc-000N</fr:display-uri>
                <fr:route>/forest/misc-000N/</fr:route>
                <fr:title text="characterization of reversible languages">characterization of reversible languages</fr:title>
                <fr:taxon>Theorem</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>
  Given a language <fr:tex display="inline"><![CDATA[\mathcal {L}]]></fr:tex>, it is a <fr:link href="/forest/misc-000M/" title="reversible regular language" uri="https://trebor-huang.github.io/forest/misc-000M/" display-uri="misc-000M" type="local">reversible regular language</fr:link> if and only if it is regular, and if <fr:tex display="inline"><![CDATA[xz, yz \in  \mathcal {L}]]></fr:tex> for some strings <fr:tex display="inline"><![CDATA[x, y, z]]></fr:tex>, then for all strings <fr:tex display="inline"><![CDATA[w]]></fr:tex> we have <fr:tex display="inline"><![CDATA[xw \in  \mathcal {L} \iff  yw \in  \mathcal {L}]]></fr:tex>.
</html:p>
  
    
    <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>2</fr:month><fr:day>22</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>
    See Theorem 7 in <fr:link href="/forest/inference-of-reversible-languages/" title="Inference of Reversible Languages" uri="https://trebor-huang.github.io/forest/inference-of-reversible-languages/" display-uri="inference-of-reversible-languages" type="local">Inference of Reversible Languages</fr:link>.
  </html:p>
</fr:mainmatter></fr:tree>
  
</fr:mainmatter>
            </fr:tree>
            <html:p>
  By the way, this suggests a definition for reversible languages in general, without restricting to regular languages. And indeed, Tatham had the <fr:link href="https://www.chiark.greenend.org.uk/~sgtatham/quasiblog/aperiodic-followup/adjrec-dsf" type="external">important realization</fr:link> that <fr:tex display="inline"><![CDATA[\mathcal {L}^+]]></fr:tex> is reversible, although the result there is stated in terms of <fr:tex display="inline"><![CDATA[\mathcal {L}]]></fr:tex>. This is essentially the same, because in the automaton for <fr:tex display="inline"><![CDATA[\mathcal {L}]]></fr:tex>, there are many accepting states, each corresponding to a tile type. And the automaton for <fr:tex display="inline"><![CDATA[\mathcal {L}^+]]></fr:tex> simply adds a โtrueโ accepting state, and connects each of the original accepting states to it by a transition that expects an input character of the correct tile type. Since we know what the tile type is at all times, there is no fundamental difference between the two languages. But for <fr:tex display="inline"><![CDATA[\mathcal {L}^+]]></fr:tex>, the start and end is completely symmetric, so it allows for a cleaner treatment.
</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>22</fr:day>
                </fr:date>
                <fr:uri>https://trebor-huang.github.io/forest/tile-000G/</fr:uri>
                <fr:display-uri>tile-000G</fr:display-uri>
                <fr:route>/forest/tile-000G/</fr:route>
                <fr:title text="the augmented language of neighborhood relation is reversible">the augmented language of neighborhood relation is reversible</fr:title>
                <fr:taxon>Theorem</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>
  Given any <fr:link href="/forest/tile-0004/" title="substitution system" uri="https://trebor-huang.github.io/forest/tile-0004/" display-uri="tile-0004" type="local">substitution system</fr:link>, the augmented <fr:link href="/forest/tile-000E/" title="language of neighborhood relation" uri="https://trebor-huang.github.io/forest/tile-000E/" display-uri="tile-000E" type="local">language of neighborhood relation</fr:link> <fr:tex display="inline"><![CDATA[\mathcal {L}^+]]></fr:tex> is <fr:link href="/forest/misc-000M/" title="reversible regular language" uri="https://trebor-huang.github.io/forest/misc-000M/" display-uri="misc-000M" type="local">reversible</fr:link>.
</html:p>
  
    
    <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>2</fr:month><fr:day>22</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>
    We use the <fr:link href="/forest/misc-000N/" title="characterization of reversible languages" uri="https://trebor-huang.github.io/forest/misc-000N/" display-uri="misc-000N" type="local">characterization of reversible languages</fr:link>. Any substring (ignoring the special starting and ending symbols) in this case describes a fixed geometric transformation between a tile and some supertile that it is contained in. So suppose <fr:tex display="inline"><![CDATA[xz, yz \in  \mathcal {L}^+]]></fr:tex>, then inverting the transformation given by <fr:tex display="inline"><![CDATA[z]]></fr:tex>, we know that <fr:tex display="inline"><![CDATA[x]]></fr:tex> and <fr:tex display="inline"><![CDATA[y]]></fr:tex> describe equivalent geometric configurations of a tile in some supertile. Therefore they must actually be <fr:link href="/forest/misc-000J/" title="Nerode congruence" uri="https://trebor-huang.github.io/forest/misc-000J/" display-uri="misc-000J" type="local">Nerode congruent</fr:link>.
  </html:p>

  <html:p>
    Since we have not rigorously defined the geometric aspects of tile systems, we will not attempt to articulate a completely formal proof. But it should be noted how geometry plays a crucial role here, meaning that substitution systems that are โnon-rigidโ may fail this property.
  </html:p>
</fr:mainmatter></fr:tree>
  
</fr:mainmatter>
            </fr:tree>
            <html:p>
  We are finally ready to discuss the benefits of a reversible language: they admit a very efficient algorithm that learns the language from a series of examples. This problem, called <html:em>language induction</html:em>, is very difficult for general languages.
</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>22</fr:day>
                </fr:date>
                <fr:uri>https://trebor-huang.github.io/forest/misc-000O/</fr:uri>
                <fr:display-uri>misc-000O</fr:display-uri>
                <fr:route>/forest/misc-000O/</fr:route>
                <fr:title text="induction of reversible languages">induction of reversible languages</fr:title>
                <fr:taxon>Algorithm</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter>
                <html:p>
  This algorithm is described in <fr:link href="/forest/inference-of-reversible-languages/" title="Inference of Reversible Languages" uri="https://trebor-huang.github.io/forest/inference-of-reversible-languages/" display-uri="inference-of-reversible-languages" type="local">Inference of Reversible Languages</fr:link>. It inputs a set of example strings in a <fr:link href="/forest/misc-000M/" title="reversible regular language" uri="https://trebor-huang.github.io/forest/misc-000M/" display-uri="misc-000M" type="local">reversible regular language</fr:link>, and outputs a finite <fr:link href="/forest/misc-000L/" title="bideterministic automaton" uri="https://trebor-huang.github.io/forest/misc-000L/" display-uri="misc-000L" type="local">bideterministic automaton</fr:link>. The soundness proof is given as Theorem 26, and if the input enumerates all the strings in the language, then the output is guaranteed to converge to the correct minimal DFA at a finite stage by Theorem 27. Note that obviously we cannot algorithmically determine whether it has converged or not, without further information.
</html:p>
                <html:p>
  The algorithm proceeds as follows. Start with a trivial automata with a start and accept state, but no transitions. When we read a new example string, add a new chain of states and transitions from the start to the accept state, solely accepting this new string. Then we perform a merging process. Whenever a state has two transitions on the same letter, we merge the destination states, and vice versa for transitions to that state. This process obviously terminates and produces a bideterministic automata. And we can read the next example string.
</html:p>
              </fr:mainmatter>
            </fr:tree>
            <html:p>
  It is easy to generate example strings in our use case: simply feed in valid finite Conway signatures in <fr:link href="/forest/tile-0007/" title="recursive neighborhood algorithm" uri="https://trebor-huang.github.io/forest/tile-0007/" display-uri="tile-0007" type="local">Algorithm <fr:contextual-number uri="https://trebor-huang.github.io/forest/tile-0007/" display-uri="tile-0007" /></fr:link>. Now all we need is a way to know when to stop. A possible criterion is when the resulting transducer never rejects a valid Conway signature. To do this, erase the outputs to get an automaton, and determinize it to get a DFA <fr:tex display="inline"><![CDATA[A]]></fr:tex>. Now consider another automaton <fr:tex display="inline"><![CDATA[B]]></fr:tex> that recognizes valid Conway signatures (paired with an edge label at the beginning and a terminating tile label). Take the product of these two automata, remove unreachable states, and check whether there are states where <fr:tex display="inline"><![CDATA[B]]></fr:tex> has a valid transition but <fr:tex display="inline"><![CDATA[A]]></fr:tex> doesnโt. This is essentially a special case of the standard algorithm deciding regular language containment.
</html:p>
            <html:p>
  Since the learned language only grows larger with each example, this condition is obviously sufficient because the original language came from a recursive function. Furthermore, we will prove that under some conditions, this can always be achieved in finite time, so the language inference algorithm terminates. Recall that for the transducer, we modified it so that every state is accepting, so this claim is reduced to the following theorem.
</html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>2</fr:month>
                  <fr:day>22</fr:day>
                </fr:date>
                <fr:uri>https://trebor-huang.github.io/forest/tile-000J/</fr:uri>
                <fr:display-uri>tile-000J</fr:display-uri>
                <fr:route>/forest/tile-000J/</fr:route>
                <fr:title text="totality of the neighborhood relation">totality of the neighborhood relation</fr:title>
                <fr:taxon>Theorem</fr:taxon>
              </fr:frontmatter>
              <fr:mainmatter><html:p>
  Suppose we have a <fr:link href="/forest/tile-0004/" title="substitution system" uri="https://trebor-huang.github.io/forest/tile-0004/" display-uri="tile-0004" type="local">substitution system</fr:link> that doesnโt involve a prototile that never appears in its <fr:link href="/forest/tile-000A/" title="hull of set of tilings" uri="https://trebor-huang.github.io/forest/tile-000A/" display-uri="tile-000A" type="local">hull</fr:link>, then for every finite <fr:link href="/forest/tile-0006/" title="Conway signature" uri="https://trebor-huang.github.io/forest/tile-0006/" display-uri="tile-0006" type="local">Conway signature</fr:link> <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> with a valid edge label <fr:tex display="inline"><![CDATA[\epsilon ]]></fr:tex>, it is always possible to extend <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex> so that the <fr:link href="/forest/tile-0007/" title="recursive neighborhood algorithm" uri="https://trebor-huang.github.io/forest/tile-0007/" display-uri="tile-0007" type="local">recursive neighborhood algorithm</fr:link> accepts it.
</html:p><html:p>
  There are contrived substitution systems that violate the condition of this theorem. For example, consider a one-dimensional system with two kinds of tiles <fr:tex display="inline"><![CDATA[a, b]]></fr:tex>. Let the substitution rules be <fr:tex display="inline"><![CDATA[a \mapsto  aa]]></fr:tex>, <fr:tex display="inline"><![CDATA[b \mapsto  ba]]></fr:tex>. Iterated deflations produce the patches <fr:tex display="inline"><![CDATA[baa\dots  a]]></fr:tex>, and taking the hull results in the periodic tiling <fr:tex display="inline"><![CDATA[\dots  aaa \dots ]]></fr:tex>, where <fr:tex display="inline"><![CDATA[b]]></fr:tex> doesnโt occur. These are probably<fr:tex display="inline"><![CDATA[^?]]></fr:tex> never interesting.
</html:p><html:p>
  Another caveat is when the substitution system contains a final stage of deflation. This technically makes most of the results invalid since deflation rules are no longer unique. But it should be apparent that this can be fixed by suitably changing our definitions and proofs.
</html:p>
  
    
    <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>2</fr:month><fr:day>22</fr:day></fr:date><fr:taxon>Proof</fr:taxon></fr:frontmatter><fr:mainmatter>
  <html:p>
    If a prototile <fr:tex display="inline"><![CDATA[t]]></fr:tex> can appear in the hull of <fr:tex display="inline"><![CDATA[\mathscr {S}]]></fr:tex>, this means for any radius, there is a patch of tiling in <fr:tex display="inline"><![CDATA[\mathscr {S}]]></fr:tex> covering that radius, with this tile in the center. In this case, <fr:tex display="inline"><![CDATA[\mathscr {S}]]></fr:tex> consists of iterated deflations of a single tile. So there exists <fr:tex display="inline"><![CDATA[t']]></fr:tex> such that its <fr:tex display="inline"><![CDATA[n]]></fr:tex>-th deflation contains <fr:tex display="inline"><![CDATA[t]]></fr:tex>, such that all the edges of <fr:tex display="inline"><![CDATA[t]]></fr:tex> have neighbors in the deflation. So <fr:tex display="inline"><![CDATA[t]]></fr:tex> has a Conway signature <fr:tex display="inline"><![CDATA[\Sigma ' = t \rightarrow  \cdots  \rightarrow  t']]></fr:tex>. Now take <fr:tex display="inline"><![CDATA[t]]></fr:tex> to be the last prototile label in <fr:tex display="inline"><![CDATA[\Sigma ]]></fr:tex>, and let the extension be the concatenation <fr:tex display="inline"><![CDATA[\Sigma  \frown  \Sigma ']]></fr:tex>.
  </html:p>
</fr:mainmatter></fr:tree>
  
</fr:mainmatter>
            </fr:tree>
            <html:p>
  We finish with some discussion on methods to execute the resulting non-deterministic transducer efficiently. One obvious way is to attempt to determinize the transducer. This is not always possible, since the transducer also has a โpotential outputโ state, which means the powerset construction may produce infinitely many states. However, this frequently works, and produces a deterministic finite state transducer.
</html:p>
            <html:p>
  Another, more convenient method is via programs like <fr:link href="https://kleenexlang.org/" type="external">Kleenex</fr:link> to compile the transducers. We can either directly extract the resulting deterministic streaming transducer and simulate it, or compile it into a binary and use FFI.
</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>2</fr:month>
              <fr:day>22</fr:day>
            </fr:date>
            <fr:uri>https://trebor-huang.github.io/forest/misc-000L/</fr:uri>
            <fr:display-uri>misc-000L</fr:display-uri>
            <fr:route>/forest/misc-000L/</fr:route>
            <fr:title text="bideterministic automaton">bideterministic automaton</fr:title>
            <fr:taxon>Definition</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>
  A deterministic automaton is <html:strong>bideterministic</html:strong> if it has only one accepting state, and if reversing all transitions and swapping the starting and accepting state produces another deterministic automaton.
</html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/forest/trebor/" title="Trebor" uri="https://trebor-huang.github.io/forest/trebor/" display-uri="trebor" type="local">Trebor</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>2</fr:month>
              <fr:day>22</fr:day>
            </fr:date>
            <fr:uri>https://trebor-huang.github.io/forest/misc-000M/</fr:uri>
            <fr:display-uri>misc-000M</fr:display-uri>
            <fr:route>/forest/misc-000M/</fr:route>
            <fr:title text="reversible regular language">reversible regular language</fr:title>
            <fr:taxon>Definition</fr:taxon>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>
  A regular language is <html:strong>reversible</html:strong> if it can be recognized by a <fr:link href="/forest/misc-000L/" title="bideterministic automaton" uri="https://trebor-huang.github.io/forest/misc-000L/" display-uri="misc-000L" type="local">bideterministic</fr:link> DFA, which is equivalent to requiring the <fr:link href="/forest/misc-000K/" title="MyhillโNerode automaton" uri="https://trebor-huang.github.io/forest/misc-000K/" display-uri="misc-000K" type="local">MyhillโNerode automaton</fr:link> to be bideterministic.
</html:p>
            <html:p>
  Note that there are stronger and weaker notions of reversible regular languages in the literature, with inconsistent names.
</html:p>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
