<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>311</fr:anchor><fr:addr>hmlg-002H</fr:addr><fr:route>hmlg-002H.xml</fr:route><fr:title>Exactness of <fr:tex>\hom</fr:tex></fr:title><fr:date><fr:year>2024</fr:year><fr:month>6</fr:month><fr:day>7</fr:day></fr:date><fr:authors><fr:author><fr:link
href="trebor.xml"
type="local"
addr="trebor">Trebor</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>
  Since <fr:tex>\hom (P, -)</fr:tex> preserves limits, by <fr:ref
addr="hmlg-000X"
href="hmlg-000X.xml"
taxon="Definition"></fr:ref> it is left exact. Similarly <fr:tex>\hom (-, I)</fr:tex> is right exact. Therefore we naturally want to find out when <fr:tex>\hom (P, -)</fr:tex> is <fr:em>right</fr:em> exact. We only need to guarantee that <fr:tex>\hom (P, -)</fr:tex> preserves epimorphisms. This can be unpackaged to the following definition.
</fr:p><fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>299</fr:anchor><fr:taxon>Definition</fr:taxon><fr:addr>hmlg-0004</fr:addr><fr:route>hmlg-0004.xml</fr:route><fr:title>Projective object</fr:title><fr:date><fr:year>2024</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date></fr:frontmatter><fr:mainmatter><fr:p>In an abelian category, an object <fr:tex>P</fr:tex> is <fr:strong>projective</fr:strong> iff for every morphism <fr:tex>P  \to  B</fr:tex> can be lifted through an epimorphism <fr:tex>A  \twoheadrightarrow  B</fr:tex>, i.e. there exists a (non-unique) morphism <fr:tex>P  \to  A</fr:tex> making the triangle commute.</fr:p></fr:mainmatter></fr:tree><fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>300</fr:anchor><fr:taxon>Intuition</fr:taxon><fr:addr>hmlg-0005</fr:addr><fr:route>hmlg-0005.xml</fr:route><fr:title>Projective objects</fr:title><fr:date><fr:year>2024</fr:year><fr:month>2</fr:month><fr:day>16</fr:day></fr:date></fr:frontmatter><fr:mainmatter><fr:p><fr:link
href="hmlg-0004.xml"
type="local"
addr="hmlg-0004">Projective objects</fr:link> are defined to capture a key property of free objects. For an arbitrary abelian group <fr:tex>P</fr:tex>, lifting a map <fr:tex>P  \to  B</fr:tex> through an epimorphism requires us to pick a lifting for every generator, such that the relations between the generators still hold after lifting. If such a thing can always be done, then we may say that the relations, or tangling between generators are practically non-existent. A projective object can thus be reguarded as generated by some elements with zero or undetectable “tangling”.
</fr:p></fr:mainmatter></fr:tree><fr:p>
  As an example, consider the projective objects in the category of modules. We can give a nice characterization of projective modules.
</fr:p><fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>301</fr:anchor><fr:taxon>Theorem</fr:taxon><fr:addr>hmlg-002I</fr:addr><fr:route>hmlg-002I.xml</fr:route><fr:title>Projective modules are direct summands of free modules</fr:title><fr:date><fr:year>2024</fr:year><fr:month>6</fr:month><fr:day>8</fr:day></fr:date><fr:authors><fr:author><fr:link
href="trebor.xml"
type="local"
addr="trebor">Trebor</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>
  In the <fr:link
href="hmlg-000Q.xml"
type="local"
addr="hmlg-000Q">abelian category</fr:link> of modules over a ring <fr:tex>R</fr:tex>, the <fr:link
href="hmlg-0004.xml"
type="local"
addr="hmlg-0004">projective object</fr:link> modules are exactly the modules that appear as a direct summand of some free module <fr:tex>P  \oplus  Q = R^{ \oplus  n}</fr:tex>.
</fr:p>
  
    
    <fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="false"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>290</fr:anchor><fr:taxon>Proof</fr:taxon><fr:addr>#247</fr:addr><fr:route>unstable-247.xml</fr:route><fr:date><fr:year>2024</fr:year><fr:month>6</fr:month><fr:day>8</fr:day></fr:date><fr:authors><fr:author><fr:link
href="trebor.xml"
type="local"
addr="trebor">Trebor</fr:link></fr:author></fr:authors><fr:parent>hmlg-002I</fr:parent></fr:frontmatter><fr:mainmatter>
  <fr:p>
    A free module evidently projective. If <fr:tex>P</fr:tex> is a direct summand of a projective module <fr:tex>Q</fr:tex>, then we can extend any map <fr:tex>P  \to  B</fr:tex> to <fr:tex>Q</fr:tex> by zero. Then the projectivity of <fr:tex>Q</fr:tex> implies that of <fr:tex>P</fr:tex>.
  </fr:p>

  <fr:p>
    On the other hand, suppose <fr:tex>P</fr:tex> is projective, then we have an epimorphism <fr:tex>R^{ \oplus  |P|}  \twoheadrightarrow  P</fr:tex>. The identity map <fr:tex>P  \to  P</fr:tex> lifts against this epimorphism to a splitting of it, hence <fr:tex>P</fr:tex> is its direct summand.
  </fr:p>
</fr:mainmatter></fr:tree>
  
</fr:mainmatter></fr:tree></fr:mainmatter><fr:backmatter><fr:contributions></fr:contributions><fr:context></fr:context><fr:related><fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>309</fr:anchor><fr:taxon>Definition</fr:taxon><fr:addr>hmlg-000X</fr:addr><fr:route>hmlg-000X.xml</fr:route><fr:title>Left and right exact functor</fr:title><fr:date><fr:year>2024</fr:year><fr:month>2</fr:month><fr:day>19</fr:day></fr:date><fr:authors><fr:author><fr:link
href="trebor.xml"
type="local"
addr="trebor">Trebor</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>
  An <fr:link
href="hmlg-000S.xml"
type="local"
addr="hmlg-000S">additive functor</fr:link> <fr:tex>F :  \mathcal { A }   \to   \mathcal { B }</fr:tex> between abelian categories is <fr:strong>left exact</fr:strong> if it satisfies the following equivalent conditions.
</fr:p><fr:ul><fr:li>It preserves kernels.</fr:li>
  <fr:li>It preserves finite limits.</fr:li>
  <fr:li>It preserves the exactness of sequences <fr:tex
display="block">0  \to  A  \to  B  \to  C.</fr:tex></fr:li></fr:ul><fr:p>
  Dually, an additive functor is <fr:strong>right exact</fr:strong> if it satisfies the following equivalent conditions.
</fr:p><fr:ul><fr:li>It preserves cokernels.</fr:li>
  <fr:li>It preserves finite colimits.</fr:li>
  <fr:li>It preserves the exactness of sequences <fr:tex
display="block">A  \to  B  \to  C  \to  0.</fr:tex></fr:li></fr:ul><fr:p>
  If a functor is both left exact and right exact, it is simply called an <fr:strong>exact functor</fr:strong>, which is equivalent to it preserving the exactness of sequences <fr:tex>A  \to  B  \to  C</fr:tex>.
</fr:p>
  
    
    <fr:tree
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"
toc="false"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"><fr:frontmatter><fr:anchor>307</fr:anchor><fr:taxon>Proof</fr:taxon><fr:addr>#257</fr:addr><fr:route>unstable-257.xml</fr:route><fr:date><fr:year>2024</fr:year><fr:month>2</fr:month><fr:day>19</fr:day></fr:date><fr:authors><fr:author><fr:link
href="trebor.xml"
type="local"
addr="trebor">Trebor</fr:link></fr:author></fr:authors><fr:parent>hmlg-000X</fr:parent></fr:frontmatter><fr:mainmatter>
  <fr:p>
    Since additive functors already preserves finite products, and <fr:link
href="hmlg-000Y.xml"
type="local"
addr="hmlg-000Y">kernels are equivalent to general equalizers</fr:link> using the additive structure, the first two conditions are equivalent.
  </fr:p>

  <fr:p>
    The sequence <fr:tex>A  \rightarrowtail  B  \to  C</fr:tex> being exact is equivalent to <fr:tex>A</fr:tex> being a kernel of <fr:tex>B  \to  C</fr:tex>. So the third condition is equivalent to the first. This completes the equivalence proof.
  </fr:p>
</fr:mainmatter></fr:tree>
  
</fr:mainmatter></fr:tree></fr:related><fr:backlinks></fr:backlinks><fr:references></fr:references></fr:backmatter></fr:tree>