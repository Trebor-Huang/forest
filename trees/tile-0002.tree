\date{2025-02-19}
\title{Overview of the setup}
\author{trebor}
\import{common}

\p{
  To generate a tiling, we need to determine what kind of information the computer needs. This can be divided into two parts. The \em{geometric} information records the shape of each tile, and the \em{combinatorial} information records the matching rules and combinatorial data of the substitution rules. Given [some combinatorial data](tile-0008), we can algorithmically produce the neighbor structure of each tile, which can then be easily graphically displayed by suitably translating and rotating the tiles using the geometric information. Note that producing the neighbor is non-trivial, since na√Øvely attempting every possible tile under the matching rules require arbitrarily far backtracking.
}

\p{
  We will first construct a \strong{[[tile-0007]]}, which computes the neighbor tile when we specify a tile and one of its edges. This is already enough if you want to display random patches of the tiling, but there are cases with zero probability where the program will hang. However, these cases often contain interesting features, such as a high degree of symmetry, or fractal structures. So we will construct another \strong{transductive neighborhood algorithm} (depending on the recursive one) that increases laziness, allowing us to handle those inputs.
}

\p{
  There is still a smaller set of input that cannot be handled. The situation is not unlike attempting to calculate #{0.9999\cdots + 0.0000\cdots}, with the algorithm forever unable to determine if it should output #{1.00\cdots} or #{0.99\cdots}, because it is unsure whether it will encounter a digit less than #{9} in the first summand, or a non-zero digit in the second summand. This is obviously impossible to solve, unless we have more information. For example, if we know beforehand that the first summand is indeed #{0.9\overline{9}}, then we can safely output #{1.} as the first digit. This also applies to our tiling algorithm. We will be able to classify all the failure cases, and if we know beforehand the input falls in one of those cases, then we can bypass the problem in an ad hoc way.
}
