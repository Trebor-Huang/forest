<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="forest.xsl"?>
<tree expanded="true" show-heading="true" show-metadata="true" toc="false" numbered="false" root="false"><frontmatter><anchor>1044</anchor> <taxon>Theorem</taxon> <addr>hmlg-000T</addr><route>hmlg-000T.xml</route>  <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Adjunctions are additive</title>   </frontmatter> <mainmatter><p>
  In an adjunction <tex>F  \dashv  G</tex>, both functors are automatically additive.
</p>
  
    
    <tree expanded="true" show-heading="true" show-metadata="false" toc="false" numbered="true" root="false"><frontmatter><anchor>1045</anchor> <taxon>Proof</taxon>   <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors>    </frontmatter> <mainmatter><p>Since the left adjoint preserves colimits, it preserves finite coproducts. Therefore by <ref addr="hmlg-000S" href="hmlg-000S.xml" taxon="Definition"/> it is an additive functor. Dually, the right adjoint preserves limits, and is also additive.</p></mainmatter> </tree>
  
</mainmatter> <backmatter><contributions/> <context><tree expanded="false" show-heading="true" show-metadata="true" toc="false" numbered="false" root="false"><frontmatter><anchor>1046</anchor>  <addr>hmlg-000U</addr><route>hmlg-000U.xml</route>  <date><year>2024</year> <month>2</month> <day>19</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Additive and abelian categories</title>   </frontmatter> <mainmatter><p>
  Since many <link href="hmlg-000L.xml" type="local" addr="hmlg-000L" title="Operations on chain complexes">operations</link> on abelian groups and <tex>R</tex>-modules can be performed on chain complexes, we wish to axiomatize an abstract notion to encapsulate them all. This motivates the definition of additive and abelian categories. We can use the three examples mentioned above as the source for intuitions for abelian categories.
</p><p>
  First, we wish to let the morphisms form abelian groups. This turns out to have a surprising impact on the structure of categories, the most important of which is the coincidence of finite products and coproducts.
</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>1047</anchor> <taxon>Definition</taxon> <addr>hmlg-000O</addr><route>hmlg-000O.xml</route>  <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title><tex>\mathsf { Ab }</tex>-enriched category</title>   </frontmatter> <mainmatter><p>
  Given a category <tex>\mathcal { C }</tex>, an <tex>\mathsf { Ab }</tex>-enrichment is given by abelian group structures on every hom-set, such that composition is linear in each argument. In other words, we have a homomorphism <tex>\hom (Y, Z)  \otimes   \hom (X, Y)  \to   \hom (X, Z)</tex>.
</p></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>1048</anchor> <taxon>Definition</taxon> <addr>hmlg-000P</addr><route>hmlg-000P.xml</route>  <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Additive category</title>   </frontmatter> <mainmatter><p>
  Let <tex>\mathcal { C }</tex> be <link href="hmlg-000O.xml" type="local" addr="hmlg-000O" title="{Ab}-enriched category"><tex>\mathsf { Ab }</tex>-enriched</link>. The finite products and coproducts, if they exist, are isomorphic via a canonical map. If they all exist, then this category is called an <strong>additive category</strong>. In particular, the nullary product and coproduct coincide, and we call the object <strong>zero object</strong>, denoted <tex>0</tex>.
</p>
  
    
    <tree expanded="true" show-heading="true" show-metadata="false" toc="false" numbered="true" root="false"><frontmatter><anchor>1049</anchor> <taxon>Proof</taxon>   <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors>    </frontmatter> <mainmatter>
  <p>
    By the universal property of products and coproducts, a map from the coproduct of some objects <tex>X_i</tex> to their product is given by a matrix of morphisms <tex>f_{ij} : X_i  \to  X_j</tex>. We choose the identity matrix
    <tex display="block">f_{ij} =  \begin {cases}        \operatorname {id}  &amp; (i = j)  \\        0 &amp; (i  \ne  j)      \end {cases}</tex>
    where <tex>0</tex> is the additive neutral element in the abelian group <tex>\hom (X_i, X_j)</tex>. This gives a canonical map <tex>\coprod _i X_i  \to   \prod _i X_i</tex>.
  </p>

  <p>
    When there are finitely many objects involved, we can construct an inverse. Consider the morphisms <tex display="block">\prod _i X_i  \xrightarrow { \pi _j} X_j  \xrightarrow { \iota _j}  \coprod _i X_i.</tex> We claim the sum of these morphisms is the desired inverse. To verify this, we compose them. Using bilinearity, we are reduced to showing that the coproduct and product of the identity map is the identity, which is true.
  </p>
</mainmatter> </tree>
  
</mainmatter> </tree><p>
  Due to this coincidence creating gadgets with <em>two universal properties</em>, the structure of additive categories are uniquely determined. This also means that we only need very mild conditions on functors to preserve the structures of an additive category.
</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>1050</anchor> <taxon>Theorem</taxon> <addr>hmlg-000R</addr><route>hmlg-000R.xml</route>  <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Being an additive category is a <link href="todo.xml" type="local" addr="todo" title="Placeholder tree">property</link></title>   </frontmatter> <mainmatter><p>
  Given a category, if it can be endowed with an <link href="hmlg-000O.xml" type="local" addr="hmlg-000O" title="{Ab}-enriched category"><tex>\mathsf { Ab }</tex>-enrichment</link> that makes it an <link href="hmlg-000P.xml" type="local" addr="hmlg-000P" title="Additive category">additive category</link>, then it only has one possible enrichment. In particular, there is at most one way to turn a category into an additive category.
</p>
  
    
    <tree expanded="true" show-heading="true" show-metadata="false" toc="false" numbered="true" root="false"><frontmatter><anchor>1051</anchor> <taxon>Proof</taxon>   <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors>    </frontmatter> <mainmatter>
  <p>
    Notice that having finite products and coproducts is a <link href="todo.xml" type="local" addr="todo" title="Placeholder tree">property</link>, and the canonical morphism between them being an isomorphism is also a <link href="todo.xml" type="local" addr="todo" title="Placeholder tree">property</link>. These do not mention the enrichment structure.
  </p>

  <p>
    With these properties satisfied, the addition structure on the <tex>\hom</tex>-sets are fixed. We claim that the additive neutral element is given by the composition
    <tex display="block">X  \to  0  \to  Y,</tex>
    and given two parallel morphisms <tex>f, g : X  \to  Y</tex>, the following composition
    <tex display="block">X  \xrightarrow { \Delta } X  \oplus  X  \xrightarrow {f  \oplus  g} Y  \oplus  Y  \xrightarrow { \nabla } Y.</tex>
    is equal to the addition <tex>f + g</tex>. For disambiguation, we temporarily denote these constructions as <tex>0'</tex> and <tex>f +' g</tex>. By interpreting <tex>\oplus</tex> as a product or a coproduct at appropriate times, it is easy to see that <tex>0'</tex> is indeed the neutral element for <tex>+'</tex>.
  </p>

  <p>
    Recall that arrows <tex>X  \oplus  X  \to  Y  \oplus  Y</tex> is given by a <tex>2  \times  2</tex> matrix, and this correspondence is an abelian group isomorphism by general enriched category theory. <tex>f  \oplus  g</tex> comes from a diagonal matrix with <tex>f, g</tex> as entries, so this operation is linear, which entails <tex>+'</tex> is also linear. By the <link href="todo.xml" type="local" addr="todo" title="Placeholder tree">Eckmannâ€“Hilton argument</link>, the two addition operations must coincide.
  </p>
</mainmatter> </tree>
  
</mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>1052</anchor> <taxon>Definition</taxon> <addr>hmlg-000S</addr><route>hmlg-000S.xml</route>  <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Additive functor</title>   </frontmatter> <mainmatter><p>
  Given two <link href="hmlg-000P.xml" type="local" addr="hmlg-000P" title="Additive category">additive categories</link> and a functor <tex>F :  \mathcal { C }   \to   \mathcal { D }</tex> between them, the following are equivalent:
  <ul><li>The functor preserves finite products.</li>
    <li>The functor preserves finite coproducts.</li>
    <li>The functor is a homomorphism on the abelian groups <tex>\hom _{ \mathcal { C } }(X, Y)</tex>, i.e. it is an <tex>\mathsf { Ab }</tex>-enriched functor.</li></ul>
  In this case, we call the functor <strong>additive</strong>.
</p>
  
    
    <tree expanded="true" show-heading="true" show-metadata="false" toc="false" numbered="true" root="false"><frontmatter><anchor>1053</anchor> <taxon>Proof</taxon>   <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors>    </frontmatter> <mainmatter>
  <p>
    For the equivalence of the first two claims, we have a composition
    <tex display="block">F(X) + F(Y)  \to  F(X + Y)  \stackrel { \sim \, }{ \to }  F(X  \times  Y)  \to  F(X)  \times  F(Y),</tex>
    where the middle morphism comes from the canonical isomorphism <tex>X + Y  \stackrel { \sim \, }{ \to }  F(X  \times  Y)</tex>. The first two claim is equivalent to the right and left arrows being iso, respectively. Recall that a morphism from a coproduct to a product is determined by a matrix of morphisms. With this fact and the functoriality of <tex>F</tex>, we can compute that the composition is the canonical isomorphism from <tex>F(X) + F(Y)</tex> to <tex>F(X)  \times  F(Y)</tex>. Therefore the leftmost arrow being iso is equivalent to the rightmost arrow being iso.
  </p>

  <p>
    Since the abelian group structure on morphisms is <link href="hmlg-000R.xml" type="local" addr="hmlg-000R" title="Being an additive category is a property">uniquely determined</link> from the finite products and coproducts in an additive category, a functor satisfying the first two conditions automatically satisfies the third. Conversely, we need to prove the canonical maps <tex>F(1)  \to  1</tex> and <tex>F(X  \times  Y)  \to  F(X)  \times  F(Y)</tex> are isomorphisms. For the first one, since <tex>1</tex> is also the initial object, any morphism into it is automatically iso. For the second one, we again look at the diagram which composes to an isomorphism:
    <tex display="block">F(X) + F(Y)  \to  F(X + Y)  \stackrel { \sim \, }{ \to }  F(X  \times  Y)  \to  F(X)  \times  F(Y).</tex>
    Using the bilinearity of composition and that <tex>F</tex> preserves addition on morphisms, we can verify that this provides a two-sided inverse.
  </p>
</mainmatter> </tree>
  
</mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>1054</anchor> <taxon>Theorem</taxon> <addr>hmlg-000T</addr><route>hmlg-000T.xml</route>  <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Adjunctions are additive</title>   </frontmatter> <mainmatter><p>
  In an adjunction <tex>F  \dashv  G</tex>, both functors are automatically additive.
</p>
  
    
    <tree expanded="true" show-heading="true" show-metadata="false" toc="false" numbered="true" root="false"><frontmatter><anchor>1055</anchor> <taxon>Proof</taxon>   <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors>    </frontmatter> <mainmatter><p>Since the left adjoint preserves colimits, it preserves finite coproducts. Therefore by <ref addr="hmlg-000S" href="hmlg-000S.xml" taxon="Definition"/> it is an additive functor. Dually, the right adjoint preserves limits, and is also additive.</p></mainmatter> </tree>
  
</mainmatter> </tree><p>
  Kernels and cokernels are also greatly simplified in additive categories.
</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>1056</anchor> <taxon>Theorem</taxon> <addr>hmlg-000Y</addr><route>hmlg-000Y.xml</route>  <date><year>2024</year> <month>2</month> <day>19</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Equalizers can be reduced to kernels in <tex>\mathsf { Ab }</tex>-enriched categories</title>   </frontmatter> <mainmatter><p>
  We can express equalizers with kernels (which are equalizers with the zero morphism).
</p>
  
    
    <tree expanded="true" show-heading="true" show-metadata="false" toc="false" numbered="true" root="false"><frontmatter><anchor>1057</anchor> <taxon>Proof</taxon>   <date><year>2024</year> <month>2</month> <day>19</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors>    </frontmatter> <mainmatter>
  <p>
    We simply need to note that an equalizer for <tex>f</tex> and <tex>g</tex> is equivalent to an equalizer for <tex>(f-g)</tex> and <tex>0</tex>, by bilinearity of composition.
  </p>
</mainmatter> </tree>
  
</mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>1058</anchor> <taxon>Intuition</taxon> <addr>hmlg-000W</addr><route>hmlg-000W.xml</route>  <date><year>2024</year> <month>2</month> <day>19</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Abelian categories</title>   </frontmatter> <mainmatter><p><link href="hmlg-000Q.xml" type="local" addr="hmlg-000Q" title="Abelian category">Abelian categories</link> are one step further from <link href="hmlg-000P.xml" type="local" addr="hmlg-000P" title="Additive category">additive categories</link>. Similar to the situation of abelian groups or modules, every morphism <tex>f : X  \to  Y</tex> has four key components, the image, the kernel, the coimage <tex>X /  \ker  f</tex>, and the cokernel <tex>Y /  \operatorname {im}  f</tex>. The image is always identical with the coimage, representing the core part of the homomorphism. The kernel perfectly measures the failure of injectivity, and the cokernel perfectly measures the failure of surjectivity. This is in stark constrast with general maps, where the failure of injectivity may be heterogeneous, and thus cannot be simply characterized.
</p></mainmatter> </tree><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>1059</anchor> <taxon>Definition</taxon> <addr>hmlg-000Q</addr><route>hmlg-000Q.xml</route>  <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Abelian category</title>   </frontmatter> <mainmatter><p>
  Given an <link href="hmlg-000P.xml" type="local" addr="hmlg-000P" title="Additive category">additive category</link>, it is an <strong>abelian category</strong> if the following condition holds:
  <ul><li>Every morphism has a kernel and a cokernel.</li>
    <li>Every monomorphism is the kernel of its cokernel.</li>
    <li>Every epimorphism is the cokernel of its kernel.</li></ul></p></mainmatter> </tree><p>
  The definition of abelian categories may look intimidating, but thinking of it as <tex>R</tex>-modules is a very effective way to reduce mental load. In fact, <link href="hmlg-000F.xml" type="local" addr="hmlg-000F" title="Freydâ€“Mitchell embedding theorem">the Freydâ€“Mitchell embedding theorem</link> justifies this to some extent, allowing us to use familiar language such as taking and manipulating elements.
</p><p>
  Although practically every important functor between additive categories is additive, the same cannot be said for abelian categories. Functors preserving the structure of abelian categories are called <link href="hmlg-000X.xml" type="local" addr="hmlg-000X" title="Left and right exact functor">exact</link>, but many functors fail to satisfy this for various reasons. <mark>One of the main endeavours of homological algebra is to characterize the failures of exactness, and study their consequences.</mark> This leads to intricate and beautiful structures emerging.
</p><tree expanded="true" show-heading="true" show-metadata="false" toc="true" numbered="true" root="false"><frontmatter><anchor>1060</anchor> <taxon>Definition</taxon> <addr>hmlg-000X</addr><route>hmlg-000X.xml</route>  <date><year>2024</year> <month>2</month> <day>19</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Left and right exact functor</title>   </frontmatter> <mainmatter><p>
  An <link href="hmlg-000S.xml" type="local" addr="hmlg-000S" title="Additive functor">additive functor</link> <tex>F :  \mathcal { A }   \to   \mathcal { B }</tex> between abelian categories is <strong>left exact</strong> if it satisfies the following equivalent conditions.

  <ul><li>It preserves kernels.</li>
    <li>It preserves finite limits.</li>
    <li>It preserves the exactness of sequences <tex display="block">0  \to  A  \to  B  \to  C.</tex></li></ul></p><p>
  Dually, an additive functor is <strong>right exact</strong> if it satisfies the following equivalent conditions.
  <ul><li>It preserves cokernels.</li>
    <li>It preserves finite colimits.</li>
    <li>It preserves the exactness of sequences <tex display="block">A  \to  B  \to  C  \to  0.</tex></li></ul>
  If a functor is both left exact and right exact, it is simply called an <strong>exact functor</strong>, which is equivalent to it preserving the exactness of sequences <tex>A  \to  B  \to  C</tex>.
</p>
  
    
    <tree expanded="true" show-heading="true" show-metadata="false" toc="false" numbered="true" root="false"><frontmatter><anchor>1061</anchor> <taxon>Proof</taxon>   <date><year>2024</year> <month>2</month> <day>19</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors>    </frontmatter> <mainmatter>
  <p>
    Since additive functors already preserves finite products, and <link href="hmlg-000Y.xml" type="local" addr="hmlg-000Y" title="Equalizers can be reduced to kernels in {Ab}-enriched categories">kernels are equivalent to general coequalizers</link> using the additive structure, the first two conditions are equivalent.
  </p>

  <p>
    The sequence <tex>A  \rightarrowtail  B  \to  C</tex> being exact is equivalent to <tex>A</tex> being a kernel of <tex>B  \to  C</tex>. So the third condition is equivalent to the first. This completes the equivalence proof.
  </p>
</mainmatter> </tree>
  
</mainmatter> </tree></mainmatter> </tree></context> <related><tree expanded="false" show-heading="true" show-metadata="true" toc="false" numbered="false" root="false"><frontmatter><anchor>1062</anchor> <taxon>Definition</taxon> <addr>hmlg-000S</addr><route>hmlg-000S.xml</route>  <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors> <title>Additive functor</title>   </frontmatter> <mainmatter><p>
  Given two <link href="hmlg-000P.xml" type="local" addr="hmlg-000P" title="Additive category">additive categories</link> and a functor <tex>F :  \mathcal { C }   \to   \mathcal { D }</tex> between them, the following are equivalent:
  <ul><li>The functor preserves finite products.</li>
    <li>The functor preserves finite coproducts.</li>
    <li>The functor is a homomorphism on the abelian groups <tex>\hom _{ \mathcal { C } }(X, Y)</tex>, i.e. it is an <tex>\mathsf { Ab }</tex>-enriched functor.</li></ul>
  In this case, we call the functor <strong>additive</strong>.
</p>
  
    
    <tree expanded="true" show-heading="true" show-metadata="false" toc="false" numbered="true" root="false"><frontmatter><anchor>1063</anchor> <taxon>Proof</taxon>   <date><year>2024</year> <month>2</month> <day>18</day></date> <authors><author><link href="trebor.xml" type="local" trebor="addr">Trebor</link></author> </authors>   <parent>hmlg-000S</parent> </frontmatter> <mainmatter>
  <p>
    For the equivalence of the first two claims, we have a composition
    <tex display="block">F(X) + F(Y)  \to  F(X + Y)  \stackrel { \sim \, }{ \to }  F(X  \times  Y)  \to  F(X)  \times  F(Y),</tex>
    where the middle morphism comes from the canonical isomorphism <tex>X + Y  \stackrel { \sim \, }{ \to }  F(X  \times  Y)</tex>. The first two claim is equivalent to the right and left arrows being iso, respectively. Recall that a morphism from a coproduct to a product is determined by a matrix of morphisms. With this fact and the functoriality of <tex>F</tex>, we can compute that the composition is the canonical isomorphism from <tex>F(X) + F(Y)</tex> to <tex>F(X)  \times  F(Y)</tex>. Therefore the leftmost arrow being iso is equivalent to the rightmost arrow being iso.
  </p>

  <p>
    Since the abelian group structure on morphisms is <link href="hmlg-000R.xml" type="local" addr="hmlg-000R" title="Being an additive category is a property">uniquely determined</link> from the finite products and coproducts in an additive category, a functor satisfying the first two conditions automatically satisfies the third. Conversely, we need to prove the canonical maps <tex>F(1)  \to  1</tex> and <tex>F(X  \times  Y)  \to  F(X)  \times  F(Y)</tex> are isomorphisms. For the first one, since <tex>1</tex> is also the initial object, any morphism into it is automatically iso. For the second one, we again look at the diagram which composes to an isomorphism:
    <tex display="block">F(X) + F(Y)  \to  F(X + Y)  \stackrel { \sim \, }{ \to }  F(X  \times  Y)  \to  F(X)  \times  F(Y).</tex>
    Using the bilinearity of composition and that <tex>F</tex> preserves addition on morphisms, we can verify that this provides a two-sided inverse.
  </p>
</mainmatter> </tree>
  
</mainmatter> </tree></related> <backlinks/> <references/></backmatter></tree>